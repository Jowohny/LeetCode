class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        #create a set for the sudoku rows, columns and 3x3 grids on the sudoku board
        #run a nested for loop to iterate through all the sudoku board pieces
        #skip adding anything to any sets if there is no number on the current grid
        #check all the set to check if the number on the grid is already in one of their row/cols/squares
        #return false if found
        #otherwise add the current grid to all respective sets
        #return true if all numbers fit the sudoku pattern and leave the for loops

        rows = defaultdict(set)
        cols = defaultdict(set)
        squares = defaultdict(set)

        for r in range(9):
            for c in range(9):
                if board[r][c] == ".":
                    continue
                if (
                    board[r][c] in rows[r]
                    or board[r][c] in cols[c]
                    or board[r][c] in squares[(r//3, c//3)]
                ):
                    return False
                
                rows[r].add(board[r][c])
                cols[c].add(board[r][c])
                squares[(r//3, c//3)].add(board[r][c])

        return True
        